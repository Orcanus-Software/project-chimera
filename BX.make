# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

INCLUDES += -Ilib/bx/3rdparty -Ilib/bx/include
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS +=
LDDEPS +=
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug_x64)
RESCOMP = windres
TARGETDIR = bin/Debug-linux-x86_64/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Debug-linux-x86_64/BX
DEFINES += -DDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -g
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),debug_xbox)
RESCOMP = windres
TARGETDIR = bin/Debug-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Debug-linux-/BX/Xbox
DEFINES += -DDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),debug_playstation)
RESCOMP = windres
TARGETDIR = bin/Debug-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Debug-linux-/BX/PlayStation
DEFINES += -DDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),debug_macos)
RESCOMP = windres
TARGETDIR = bin/Debug-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Debug-linux-/BX/macOS
DEFINES += -DDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),debug_ios)
ifeq ($(origin CC), default)
  CC = clang
endif
ifeq ($(origin CXX), default)
  CXX = clang++
endif
ifeq ($(origin AR), default)
  AR = ar
endif
TARGETDIR = bin/Debug-ios-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Debug-ios-/BX
DEFINES += -DDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),debug_linux_x64)
RESCOMP = windres
TARGETDIR = bin/Debug-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Debug-linux-/BX/Linux_x64
DEFINES += -DDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),release_x64)
RESCOMP = windres
TARGETDIR = bin/Release-linux-x86_64/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Release-linux-x86_64/BX
DEFINES += -DNDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else ifeq ($(config),release_xbox)
RESCOMP = windres
TARGETDIR = bin/Release-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Release-linux-/BX/Xbox
DEFINES += -DNDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2
ALL_LDFLAGS += $(LDFLAGS) -s

else ifeq ($(config),release_playstation)
RESCOMP = windres
TARGETDIR = bin/Release-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Release-linux-/BX/PlayStation
DEFINES += -DNDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2
ALL_LDFLAGS += $(LDFLAGS) -s

else ifeq ($(config),release_macos)
RESCOMP = windres
TARGETDIR = bin/Release-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Release-linux-/BX/macOS
DEFINES += -DNDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2
ALL_LDFLAGS += $(LDFLAGS) -s

else ifeq ($(config),release_ios)
ifeq ($(origin CC), default)
  CC = clang
endif
ifeq ($(origin CXX), default)
  CXX = clang++
endif
ifeq ($(origin AR), default)
  AR = ar
endif
TARGETDIR = bin/Release-ios-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Release-ios-/BX
DEFINES += -DNDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),release_linux_x64)
RESCOMP = windres
TARGETDIR = bin/Release-linux-/BX
TARGET = $(TARGETDIR)/libBX.a
OBJDIR = bin-int/Release-linux-/BX/Linux_x64
DEFINES += -DNDEBUG -D__STDC_FORMAT_MACROS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2
ALL_LDFLAGS += $(LDFLAGS) -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/allocator.o
GENERATED += $(OBJDIR)/bx.o
GENERATED += $(OBJDIR)/commandline.o
GENERATED += $(OBJDIR)/debug.o
GENERATED += $(OBJDIR)/dtoa.o
GENERATED += $(OBJDIR)/easing.o
GENERATED += $(OBJDIR)/file.o
GENERATED += $(OBJDIR)/filepath.o
GENERATED += $(OBJDIR)/hash.o
GENERATED += $(OBJDIR)/math.o
GENERATED += $(OBJDIR)/mutex.o
GENERATED += $(OBJDIR)/os.o
GENERATED += $(OBJDIR)/process.o
GENERATED += $(OBJDIR)/semaphore.o
GENERATED += $(OBJDIR)/settings.o
GENERATED += $(OBJDIR)/sort.o
GENERATED += $(OBJDIR)/string.o
GENERATED += $(OBJDIR)/thread.o
GENERATED += $(OBJDIR)/timer.o
GENERATED += $(OBJDIR)/url.o
OBJECTS += $(OBJDIR)/allocator.o
OBJECTS += $(OBJDIR)/bx.o
OBJECTS += $(OBJDIR)/commandline.o
OBJECTS += $(OBJDIR)/debug.o
OBJECTS += $(OBJDIR)/dtoa.o
OBJECTS += $(OBJDIR)/easing.o
OBJECTS += $(OBJDIR)/file.o
OBJECTS += $(OBJDIR)/filepath.o
OBJECTS += $(OBJDIR)/hash.o
OBJECTS += $(OBJDIR)/math.o
OBJECTS += $(OBJDIR)/mutex.o
OBJECTS += $(OBJDIR)/os.o
OBJECTS += $(OBJDIR)/process.o
OBJECTS += $(OBJDIR)/semaphore.o
OBJECTS += $(OBJDIR)/settings.o
OBJECTS += $(OBJDIR)/sort.o
OBJECTS += $(OBJDIR)/string.o
OBJECTS += $(OBJDIR)/thread.o
OBJECTS += $(OBJDIR)/timer.o
OBJECTS += $(OBJDIR)/url.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking BX
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning BX
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/allocator.o: lib/bx/src/allocator.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/bx.o: lib/bx/src/bx.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/commandline.o: lib/bx/src/commandline.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/debug.o: lib/bx/src/debug.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dtoa.o: lib/bx/src/dtoa.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/easing.o: lib/bx/src/easing.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/file.o: lib/bx/src/file.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/filepath.o: lib/bx/src/filepath.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/hash.o: lib/bx/src/hash.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/math.o: lib/bx/src/math.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mutex.o: lib/bx/src/mutex.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/os.o: lib/bx/src/os.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/process.o: lib/bx/src/process.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/semaphore.o: lib/bx/src/semaphore.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/settings.o: lib/bx/src/settings.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/sort.o: lib/bx/src/sort.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/string.o: lib/bx/src/string.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/thread.o: lib/bx/src/thread.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/timer.o: lib/bx/src/timer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/url.o: lib/bx/src/url.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif